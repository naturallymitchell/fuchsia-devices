# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/rules.gni")
import("//build/test.gni")
import("//build/test/test_package.gni")
import("//build/unification/images/migrated_manifest.gni")

driver_module("usb-mass-storage") {
  defines = [ "_ALL_SOURCE" ]
  configs += [ "//build/config/fuchsia:enable_zircon_asserts" ]
  configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
  configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
  configs += [ "//build/unification/config:zircon-migrated" ]
  sources = [ "usb-mass-storage.cc" ]
  deps = [
    ":block",
    "//src/devices/lib/driver",
  ]
}

source_set("block") {
  visibility = [ ":*" ]
  sources = [ "block.cc" ]
  public_deps = [
    "//sdk/banjo/ddk.protocol.block",
    "//sdk/banjo/ddk.protocol.usb",
    "//sdk/banjo/ddk.protocol.usb.composite",
    "//sdk/banjo/ddk.protocol.usb.request",
    "//src/devices/usb/lib/usb",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//zircon/public/lib/fbl",
    "//zircon/public/lib/fidl-async",
    "//zircon/public/lib/fzl",
    "//zircon/public/lib/sync",
    "//zircon/public/lib/zx",
    "//zircon/system/ulib/async-loop",
  ]
}

test("ums-block") {
  configs += [ "//build/unification/config:zircon-migrated" ]
  sources = [ "tests/block.cc" ]
  deps = [
    ":block",
    "//src/devices/testing/fake-bti",
    "//src/devices/testing/fake_ddk",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/unittest",
  ]
}

test("ums") {
  configs += [ "//build/unification/config:zircon-migrated" ]
  sources = [
    "tests/usb-mass-storage.cc",
    "usb-mass-storage.cc",
  ]
  defines = [ "UNITTEST" ]
  deps = [
    ":block",
    "//src/devices/testing/fake-bti",
    "//src/devices/testing/fake_ddk",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/unittest",
  ]
}

migrated_manifest("usb-mass-storage-manifest") {
  deps = [ ":usb-mass-storage" ]
}

unittest_package("ums-block-package") {
  package_name = "ums-block"
  deps = [ ":ums-block" ]

  tests = [
    {
      name = "ums-block"
      environments = basic_envs
    },
  ]
}

group("tests") {
  testonly = true
  deps = [
    ":ums-block-package",
    ":ums-package",
  ]
}

unittest_package("ums-package") {
  package_name = "ums"
  deps = [ ":ums" ]

  tests = [
    {
      name = "ums"
      environments = basic_envs
    },
  ]
}
