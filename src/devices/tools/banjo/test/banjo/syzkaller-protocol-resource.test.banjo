// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.syzkaller.protocol.resources;

resource handle: ZX_HANDLE_INVALID;
resource handle<process>: ZX_HANDLE_INVALID;
resource handle<thread>: ZX_HANDLE_INVALID;
resource handle<vmo>: ZX_HANDLE_INVALID;
resource handle<channel>: ZX_HANDLE_INVALID;
resource handle<event>: ZX_HANDLE_INVALID;
resource handle<port>: ZX_HANDLE_INVALID;
resource handle<interrupt>: ZX_HANDLE_INVALID;
resource handle<log>: ZX_HANDLE_INVALID;
resource handle<socket>: ZX_HANDLE_INVALID;
resource handle<resource>: ZX_HANDLE_INVALID;
resource handle<eventpair>: ZX_HANDLE_INVALID;
resource handle<job>: ZX_HANDLE_INVALID;
resource handle<vmar>: ZX_HANDLE_INVALID;
resource handle<fifo>: ZX_HANDLE_INVALID;
resource handle<guest>: ZX_HANDLE_INVALID;
resource handle<timer>: ZX_HANDLE_INVALID;
resource handle<bti>: ZX_HANDLE_INVALID;
resource handle<profile>: ZX_HANDLE_INVALID;
resource handle<debuglog>: ZX_HANDLE_INVALID;
resource handle<vcpu>: ZX_HANDLE_INVALID;
resource handle<iommu>: ZX_HANDLE_INVALID;
resource handle<pager>: ZX_HANDLE_INVALID;
resource handle<pmt>: ZX_HANDLE_INVALID;
resource zx.time: 0, ZX_TIME_INFINITE;
resource zx.duration;
resource zx.clock;
resource zx.koid: 0;
resource zx.vaddr;
resource zx.paddr;
resource zx.paddr32;
resource zx.gpaddr;
resource zx.off;
resource zx.rights;
resource zx.signals;
resource zx.vm_option;

protocol Api {

    //
    //
    // Enumeration of handle types
    //
    //

    Producer(uint32 options) -> (zx.status st, handle out);
    Consumer(handle h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<process> out);
    Consumer(handle<process> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<thread> out);
    Consumer(handle<thread> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<vmo> out);
    Consumer(handle<vmo> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<channel> out);
    Consumer(handle<channel> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<event> out);
    Consumer(handle<event> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<port> out);
    Consumer(handle<port> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<interrupt> out);
    Consumer(handle<interrupt> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<log> out);
    Consumer(handle<log> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<socket> out);
    Consumer(handle<socket> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<resource> out);
    Consumer(handle<resource> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<eventpair> out);
    Consumer(handle<eventpair> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<job> out);
    Consumer(handle<job> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<vmar> out);
    Consumer(handle<vmar> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<fifo> out);
    Consumer(handle<fifo> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<guest> out);
    Consumer(handle<guest> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<guest> out);
    Consumer(handle<guest> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<timer> out);
    Consumer(handle<timer> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<bti> out);
    Consumer(handle<bti> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<profile> out);
    Consumer(handle<profile> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<debuglog> out);
    Consumer(handle<debuglog> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<vcpu> out);
    Consumer(handle<vcpu> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<iommu> out);
    Consumer(handle<iommu> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<pager> out);
    Consumer(handle<pager> h) -> (zx.status st);

    Producer(uint32 options) -> (zx.status st, handle<pmt> out);
    Consumer(handle<pmt> h) -> (zx.status st);

    //
    //
    // zx.banjo types
    //
    //

    Producer(handle h) -> (zx.time t);
    Producer2(handle h) -> (zx.status st, zx.time out);
    Consumer(zx.time t) -> (zx.status st);

    Producer(handle h) -> (zx.duration d);
    Producer2(handle h) -> (zx.status st, zx.duration out);
    Consumer(zx.duration d) -> (zx.status st);

    Producer(handle h) -> (zx.clock cid);
    Producer2(handle h) -> (zx.status st, zx.clock out);
    Consumer(zx.clock cid) -> (zx.status st);

    Producer(handle h) -> (zx.koid id);
    Producer2(handle h) -> (zx.status st, zx.koid out);
    Consumer(zx.koid id) -> (zx.status st);

    Producer(handle h) -> (zx.vaddr va);
    Producer2(handle h) -> (zx.status st, zx.vaddr out);
    Consumer(zx.vaddr va) -> (zx.status st);

    Producer(handle h) -> (zx.paddr pa);
    Producer2(handle h) -> (zx.status st, zx.paddr out);
    Consumer(zx.paddr pa) -> (zx.status st);

    Producer(handle h) -> (zx.paddr32 pa32);
    Producer2(handle h) -> (zx.status st, zx.paddr32 out);
    Consumer(zx.paddr32 pa32) -> (zx.status st);

    Producer(handle h) -> (zx.gpaddr gpa);
    Producer2(handle h) -> (zx.status st, zx.gpaddr out);
    Consumer(zx.gpaddr gpa) -> (zx.status st);

    Producer(handle h) -> (zx.off o);
    Producer2(handle h) -> (zx.status st, zx.off out);
    Consumer(zx.off o) -> (zx.status st);

    Producer(handle h) -> (zx.rights r);
    Producer2(handle h) -> (zx.status st, zx.rights out);
    Consumer(zx.rights r) -> (zx.status st);

    Producer(handle h) -> (zx.signals s);
    Producer2(handle h) -> (zx.status st, zx.signals out);
    Consumer(zx.signals s) -> (zx.status st);

    Producer(handle h) -> (zx.vm_option op);
    Producer2(handle h) -> (zx.status st, zx.vm_option out);
    Consumer(zx.vm_option op) -> (zx.status st);

};
