// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.interface;

using zx;

/// Types of cookies CookieMaker can prep.
enum CookieKind {
    /// Universal favorite.
    Chocolate = 0;
    /// Holiday favorite.
    Gingerbread = 1;
    /// Test-writer's favorite.
    Snickerdoodle = 2;
};

/// An interface for a device that's able to create and deliver cookies!
[BanjoLayout = "ddk-interface"]
protocol CookieMaker {
    /// Asynchonously preps a cookie.
    [Async]
    Prep(CookieKind cookie) -> (uint64 token);
    /// Asynchonously bakes a cookie.
    /// Must only be called after preping finishes.
    [Async]
    Bake(uint64 token, zx.time time) -> (zx.status s);
    /// Synchronously deliver a cookie.
    /// Must be called only after Bake finishes.
    Deliver(uint64 token) -> (zx.status s);
};

/// Protocol for a baker who outsources all of it's baking duties to others.
[BanjoLayout = "ddk-protocol"]
protocol Baker {
    /// Registers a cookie maker device which the baker can use.
    Register(CookieMaker intf) -> ();
    /// De-registers a cookie maker device when it's no longer available.
    DeRegister() -> ();
};
