// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.protocol.handle;

// TODO(surajmalhotra): Reference for handles.

[BanjoLayout = "ddk-protocol"]
protocol SynchronousHandle {
    Handle(handle h) -> (handle h, handle h2);
    Process(handle<process> h) -> (handle<process> h, handle<process> h2);
    Thread(handle<thread> h) -> (handle<thread> h, handle<thread> h2);
    Vmo(handle<vmo> h) -> (handle<vmo> h, handle<vmo> h2);
    Channel(handle<channel> h) -> (handle<channel> h, handle<channel> h2);
    Event(handle<event> h) -> (handle<event> h, handle<event> h2);
    Port(handle<port> h) -> (handle<port> h, handle<port> h2);
    Interrupt(handle<interrupt> h) -> (handle<interrupt> h, handle<interrupt> h2);
    DebugLog(handle<debuglog> h) -> (handle<debuglog> h, handle<debuglog> h2);
    Socket(handle<socket> h) -> (handle<socket> h, handle<socket> h2);
    Resource(handle<resource> h) -> (handle<resource> h, handle<resource> h2);
    EventPair(handle<eventpair> h) -> (handle<eventpair> h, handle<eventpair> h2);
    Job(handle<job> h) -> (handle<job> h, handle<job> h2);
    Vmar(handle<vmar> h) -> (handle<vmar> h, handle<vmar> h2);
    Fifo(handle<fifo> h) -> (handle<fifo> h, handle<fifo> h2);
    Guest(handle<guest> h) -> (handle<guest> h, handle<guest> h2);
    Timer(handle<timer> h) -> (handle<timer> h, handle<timer> h2);
    Profile(handle<profile> h) -> (handle<profile> h, handle<profile> h2);
};

[BanjoLayout = "ddk-protocol"]
protocol AnotherSynchronousHandle {
    Handle(handle h) -> (handle @h, handle @h2);
};

[BanjoLayout = "ddk-protocol"]
protocol AsyncHandle {
    [Async]
    Handle(handle h) -> (handle h, handle h2);
    [Async]
    Process(handle<process> h) -> (handle<process> h, handle<process> h2);
    [Async]
    Thread(handle<thread> h) -> (handle<thread> h, handle<thread> h2);
    [Async]
    Vmo(handle<vmo> h) -> (handle<vmo> h, handle<vmo> h2);
    [Async]
    Channel(handle<channel> h) -> (handle<channel> h, handle<channel> h2);
    [Async]
    Event(handle<event> h) -> (handle<event> h, handle<event> h2);
    [Async]
    Port(handle<port> h) -> (handle<port> h, handle<port> h2);
    [Async]
    Interrupt(handle<interrupt> h) -> (handle<interrupt> h, handle<interrupt> h2);
    [Async]
    DebugLog(handle<debuglog> h) -> (handle<debuglog> h, handle<debuglog> h2);
    [Async]
    Socket(handle<socket> h) -> (handle<socket> h, handle<socket> h2);
    [Async]
    Resource(handle<resource> h) -> (handle<resource> h, handle<resource> h2);
    [Async]
    EventPair(handle<eventpair> h) -> (handle<eventpair> h, handle<eventpair> h2);
    [Async]
    Job(handle<job> h) -> (handle<job> h, handle<job> h2);
    [Async]
    Vmar(handle<vmar> h) -> (handle<vmar> h, handle<vmar> h2);
    [Async]
    Fifo(handle<fifo> h) -> (handle<fifo> h, handle<fifo> h2);
    [Async]
    Guest(handle<guest> h) -> (handle<guest> h, handle<guest> h2);
    [Async]
    Timer(handle<timer> h) -> (handle<timer> h, handle<timer> h2);
    [Async]
    Profile(handle<profile> h) -> (handle<profile> h, handle<profile> h2);
};

