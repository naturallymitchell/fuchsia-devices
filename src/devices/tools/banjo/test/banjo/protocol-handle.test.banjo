// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.protocol.handle;

// TODO(surajmalhotra): Reference for handles.

[BanjoLayout = "ddk-protocol"]
protocol SynchronousHandle {
    Handle(zx.handle h) -> (zx.handle h, zx.handle h2);
    Process(zx.handle:PROCESS h) -> (zx.handle:PROCESS h, zx.handle:PROCESS h2);
    Thread(zx.handle:THREAD h) -> (zx.handle:THREAD h, zx.handle:THREAD h2);
    Vmo(zx.handle:VMO h) -> (zx.handle:VMO h, zx.handle:VMO h2);
    Channel(zx.handle:CHANNEL h) -> (zx.handle:CHANNEL h, zx.handle:CHANNEL h2);
    Event(zx.handle:EVENT h) -> (zx.handle:EVENT h, zx.handle:EVENT h2);
    Port(zx.handle:PORT h) -> (zx.handle:PORT h, zx.handle:PORT h2);
    Interrupt(zx.handle:INTERRUPT h) -> (zx.handle:INTERRUPT h, zx.handle:INTERRUPT h2);
    Socket(zx.handle:SOCKET h) -> (zx.handle:SOCKET h, zx.handle:SOCKET h2);
    Resource(zx.handle:RESOURCE h) -> (zx.handle:RESOURCE h, zx.handle:RESOURCE h2);
    EventPair(zx.handle:EVENTPAIR h) -> (zx.handle:EVENTPAIR h, zx.handle:EVENTPAIR h2);
    Job(zx.handle:JOB h) -> (zx.handle:JOB h, zx.handle:JOB h2);
    Vmar(zx.handle:VMAR h) -> (zx.handle:VMAR h, zx.handle:VMAR h2);
    Fifo(zx.handle:FIFO h) -> (zx.handle:FIFO h, zx.handle:FIFO h2);
    Guest(zx.handle:GUEST h) -> (zx.handle:GUEST h, zx.handle:GUEST h2);
    Timer(zx.handle:TIMER h) -> (zx.handle:TIMER h, zx.handle:TIMER h2);
    Profile(zx.handle:PROFILE h) -> (zx.handle:PROFILE h, zx.handle:PROFILE h2);
};

[BanjoLayout = "ddk-protocol"]
protocol AnotherSynchronousHandle {
    Handle(zx.handle h) -> (zx.handle @h, zx.handle @h2);
};

[BanjoLayout = "ddk-protocol"]
protocol AsyncHandle {
    [Async]
    Handle(zx.handle h) -> (zx.handle h, zx.handle h2);
    [Async]
    Process(zx.handle:PROCESS h) -> (zx.handle:PROCESS h, zx.handle:PROCESS h2);
    [Async]
    Thread(zx.handle:THREAD h) -> (zx.handle:THREAD h, zx.handle:THREAD h2);
    [Async]
    Vmo(zx.handle:VMO h) -> (zx.handle:VMO h, zx.handle:VMO h2);
    [Async]
    Channel(zx.handle:CHANNEL h) -> (zx.handle:CHANNEL h, zx.handle:CHANNEL h2);
    [Async]
    Event(zx.handle:EVENT h) -> (zx.handle:EVENT h, zx.handle:EVENT h2);
    [Async]
    Port(zx.handle:PORT h) -> (zx.handle:PORT h, zx.handle:PORT h2);
    [Async]
    Interrupt(zx.handle:INTERRUPT h) -> (zx.handle:INTERRUPT h, zx.handle:INTERRUPT h2);
    [Async]
    Socket(zx.handle:SOCKET h) -> (zx.handle:SOCKET h, zx.handle:SOCKET h2);
    [Async]
    Resource(zx.handle:RESOURCE h) -> (zx.handle:RESOURCE h, zx.handle:RESOURCE h2);
    [Async]
    EventPair(zx.handle:EVENTPAIR h) -> (zx.handle:EVENTPAIR h, zx.handle:EVENTPAIR h2);
    [Async]
    Job(zx.handle:JOB h) -> (zx.handle:JOB h, zx.handle:JOB h2);
    [Async]
    Vmar(zx.handle:VMAR h) -> (zx.handle:VMAR h, zx.handle:VMAR h2);
    [Async]
    Fifo(zx.handle:FIFO h) -> (zx.handle:FIFO h, zx.handle:FIFO h2);
    [Async]
    Guest(zx.handle:GUEST h) -> (zx.handle:GUEST h, zx.handle:GUEST h2);
    [Async]
    Timer(zx.handle:TIMER h) -> (zx.handle:TIMER h, zx.handle:TIMER h2);
    [Async]
    Profile(zx.handle:PROFILE h) -> (zx.handle:PROFILE h, zx.handle:PROFILE h2);
};
