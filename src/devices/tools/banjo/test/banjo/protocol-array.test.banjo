// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.protocol.array;

// TODO(surajmalhotra): Async for arrays.
// TODO(surajmalhotra): Reference for arrays.

[Layout = "ddk-protocol"]
protocol Array {
    Bool(array<bool>:1 b) -> (array<bool>:1 b);
    Int8(array<int8>:1 i8) -> (array<int8>:1 i8);
    Int16(array<int16>:1 i16) -> (array<int16>:1 i16);
    Int32(array<int32>:1 i32) -> (array<int32>:1 i32);
    Int64(array<int64>:1 i64) -> (array<int64>:1 i64);
    Uint8(array<uint8>:1 u8) -> (array<uint8>:1 u8);
    Uint16(array<uint16>:1 u16) -> (array<uint16>:1 u16);
    Uint32(array<uint32>:1 u32) -> (array<uint32>:1 u32);
    Uint64(array<uint64>:1 u64) -> (array<uint64>:1 u64);
    Float32(array<float32>:1 f32) -> (array<float32>:1 f32);
    Float64(array<float64>:1 u64) -> (array<float64>:1 f64);
    Handle(array<handle>:1 u64) -> (array<handle>:1 f64);
};

const uint32 array_size = 32;

[Layout = "ddk-protocol"]
protocol Array2 {
    Bool(array<bool>:array_size b) -> (array<bool>:array_size b);
    Int8(array<int8>:array_size i8) -> (array<int8>:array_size i8);
    Int16(array<int16>:array_size i16) -> (array<int16>:array_size i16);
    Int32(array<int32>:array_size i32) -> (array<int32>:array_size i32);
    Int64(array<int64>:array_size i64) -> (array<int64>:array_size i64);
    Uint8(array<uint8>:array_size u8) -> (array<uint8>:array_size u8);
    Uint16(array<uint16>:array_size u16) -> (array<uint16>:array_size u16);
    Uint32(array<uint32>:array_size u32) -> (array<uint32>:array_size u32);
    Uint64(array<uint64>:array_size u64) -> (array<uint64>:array_size u64);
    Float32(array<float32>:array_size f32) -> (array<float32>:array_size f32);
    Float64(array<float64>:array_size u64) -> (array<float64>:array_size f64);
    Handle(array<handle>:array_size u64) -> (array<handle>:array_size f64);
};

[Layout = "ddk-protocol"]
protocol ArrayofArrays {
    Bool(array<array<bool>:4>:array_size b) -> (array<array<bool>:4>:array_size b);
    Int8(array<array<int8>:4>:array_size i8) -> (array<array<int8>:4>:array_size i8);
    Int16(array<array<int16>:4>:array_size i16) -> (array<array<int16>:4>:array_size i16);
    Int32(array<array<int32>:4>:array_size i32) -> (array<array<int32>:4>:array_size i32);
    Int64(array<array<int64>:4>:array_size i64) -> (array<array<int64>:4>:array_size i64);
    Uint8(array<array<uint8>:4>:array_size u8) -> (array<array<uint8>:4>:array_size u8);
    Uint16(array<array<uint16>:4>:array_size u16) -> (array<array<uint16>:4>:array_size u16);
    Uint32(array<array<uint32>:4>:array_size u32) -> (array<array<uint32>:4>:array_size u32);
    Uint64(array<array<uint64>:4>:array_size u64) -> (array<array<uint64>:4>:array_size u64);
    Float32(array<array<float32>:4>:array_size f32) -> (array<array<float32>:4>:array_size f32);
    Float64(array<array<float64>:4>:array_size u64) -> (array<array<float64>:4>:array_size f64);
    Handle(array<array<handle>:4>:array_size u64) -> (array<array<handle>:4>:array_size f64);
};

