// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.api;

using zx;

protocol Api {
    bool(zx.handle handle, bool data) -> (zx.status status);
    int8(zx.handle handle, int8 data) -> (zx.status status);
    int16(zx.handle handle, int16 data) -> (zx.status status);
    int32(zx.handle handle, int32 data) -> (zx.status status);
    int64(zx.handle handle, int64 data) -> (zx.status status);
    uint8(zx.handle handle, uint8 data) -> (zx.status status);
    uint16(zx.handle handle, uint16 data) -> (zx.status status);
    uint32(zx.handle handle, uint32 data) -> (zx.status status);
    uint64(zx.handle handle, uint64 data) -> (zx.status status);
    float32(zx.handle handle, float32 data) -> (zx.status status);
    float64(zx.handle handle, float64 data) -> (zx.status status);
    duration(zx.handle handle, zx.duration data) -> (zx.status status);
    koid(zx.handle handle, zx.koid data) -> (zx.status status);
    paddr(zx.handle handle, zx.paddr data) -> (zx.status status);
    signals(zx.handle handle, zx.signals data) -> (zx.status status);
    time(zx.handle handle, zx.time data) -> (zx.status status);
    vaddr(zx.handle handle, zx.vaddr data) -> (zx.status status);
    buffer(zx.handle handle, array<voidptr>:size data, uint32 size) ->
        (zx.status status);

    output_bool(zx.handle handle) -> (zx.status status, bool result);
    output_int8(zx.handle handle) -> (zx.status status, int8 result);
    output_int16(zx.handle handle) -> (zx.status status, int16 result);
    output_int32(zx.handle handle) -> (zx.status status, int32 result);
    output_int64(zx.handle handle) -> (zx.status status, int64 result);
    output_uint8(zx.handle handle) -> (zx.status status, uint8 result);
    output_uint16(zx.handle handle) -> (zx.status status, uint16 result);
    output_uint32(zx.handle handle) -> (zx.status status, uint32 result);
    output_uint64(zx.handle handle) -> (zx.status status, uint64 result);
    output_float32(zx.handle handle) -> (zx.status status, float32 result);
    output_float64(zx.handle handle) -> (zx.status status, float64 result);
    output_duration(zx.handle handle) -> (zx.status status, zx.duration result);
    output_koid(zx.handle handle) -> (zx.status status, zx.koid result);
    output_paddr(zx.handle handle) -> (zx.status status, zx.paddr result);
    output_signals(zx.handle handle) -> (zx.status status, zx.signals result);
    output_time(zx.handle handle) -> (zx.status status, zx.time result);
    output_vaddr(zx.handle handle) -> (zx.status status, zx.vaddr result);
    output_buffer(zx.handle handle, array<voidptr>:size data, uint32 size) ->
        (zx.status status, uint32 actual);

    return_void(zx.handle handle) -> ();
    return_status(zx.handle handle) -> (zx.status status);
    return_ticks(zx.handle handle) -> (zx.ticks result);
    return_time(zx.handle handle) -> (zx.time result);
    return_uint32(zx.handle handle) -> (uint32 result);
    return_uint64(zx.handle handle) -> (uint64 result);
};
