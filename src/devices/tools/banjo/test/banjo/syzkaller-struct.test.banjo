// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library banjo.examples.syzkaller.struct;

//
//
// Using primitive types as a struct field
//
//
struct primitive_types {
    bool b;
    int8 i8;
    int16 i16;
    int32 i32;
    int64 i64;
    uint8 u8;
    uint16 u16;
    uint32 u32;
    uint64 u64;
    handle h;
};

//
//
// Using string as a struct field
//
//
[argtype = "rd_str OUT",
 argtype = "wr_str IN"]
struct strings {
    string:rd_str_len rd_str;
    string:wr_str_len wr_str;
    usize rd_str_len;
    usize wr_str_len;
};

//
//
// Using different array types as a struct field
//
//
[argtype = "rd_vptr OUT",
 argtype = "wr_vptr IN",
 argtype = "rd_sz OUT",
 argtype = "rd_sz IN"
 argtype = "rd_b OUT",
 argtype = "wr_b IN",
 argtype = "rd_i8 OUT",
 argtype = "wr_i8 IN",
 argtype = "rd_i16 OUT",
 argtype = "wr_i16 IN"
 argtype = "rd_i32 OUT",
 argtype = "wr_i32 IN"
 argtype = "rd_i64 OUT",
 argtype = "wr_i64 IN",
 argtype = "rd_u8 OUT",
 argtype = "wr_u8 IN",
 argtype = "rd_u16 OUT",
 argtype = "wr_u16 IN"
 argtype = "rd_u32 OUT",
 argtype = "wr_u32 IN"
 argtype = "rd_u64 OUT",
 argtype = "wr_u64 IN",
 argtype = "rd_h OUT",
 argtype = "wr_h IN"]
struct arrays {

    array<voidptr>:rd_vptr_len rd_vptr;
    array<voidptr>:wr_vptr_len wr_vptr;
    usize rd_vptr_len;
    usize wr_vptr_len;

    array<usize>:rd_sz_len rd_sz;
    array<usize>:wr_sz_len rd_sz;
    usize rd_sz_len;
    usize wr_sz_len;

    array<bool>:rd_b_len rd_b;
    array<bool>:wr_b_len wr_b;
    usize rd_b_len;
    usize wr_b_len;

    array<int8>:rd_i8_len rd_i8;
    array<int8>:wr_i8_len wr_i8;
    usize rd_i8_len;
    usize wr_i8_len;

    array<int16>:rd_i16_len rd_i16;
    array<int16>:wr_i16_len wr_i16;
    usize rd_i16_len;
    usize wr_i16_len;

    array<int32>:rd_i32_len rd_i32;
    array<int32>:wr_i32_len wr_i32;
    usize rd_i32_len;
    usize wr_i32_len;

    array<int64>:rd_i64_len rd_i64;
    array<int64>:wr_i64_len wr_i64;
    usize rd_i64_len;
    usize wr_i64_len;

    array<uint8>:rd_u8_len rd_u8;
    array<uint8>:wr_u8_len wr_u8;
    usize rd_u8_len;
    usize wr_u8_len;

    array<uint16>:rd_u16_len rd_u16;
    array<uint16>:wr_u16_len wr_u16;
    usize rd_u16_len;
    usize wr_u16_len;

    array<uint32>:rd_u32_len rd_u32;
    array<uint32>:wr_u32_len wr_u32;
    usize rd_u32_len;
    usize wr_u32_len;

    array<uint64>:rd_u64_len rd_u64;
    array<uint64>:wr_u64_len wr_u64;
    usize rd_u64_len;
    usize wr_u64_len;

    array<handle>:rd_h_len rd_h;
    array<handle>:wr_h_len wr_h;
    usize rd_h_len;
    usize wr_h_len;

};

//
//
// Using declared struct as a method argument
//
//
struct Point {
    int32 x;
    int32 y;
};

protocol Api {
    Point(handle h, Point pt) -> (zx.status st);
};
