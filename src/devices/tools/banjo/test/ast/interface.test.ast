BanjoAst {
    primary_namespace: "banjo.examples.interface",
    namespaces: {
        "banjo.examples.interface": [
            Enum {
                attributes: Attrs(
                    [
                        Attr {
                            key: "Doc",
                            val: Some(
                                " Types of cookies CookieMaker can prep.\n",
                            ),
                        },
                    ],
                ),
                name: Ident {
                    namespace: Some(
                        "banjo.examples.interface",
                    ),
                    name: "CookieKind",
                },
                ty: UInt32,
                variants: [
                    EnumVariant {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Universal favorite.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Chocolate",
                        value: Constant(
                            "0",
                        ),
                    },
                    EnumVariant {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Holiday favorite.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Gingerbread",
                        value: Constant(
                            "1",
                        ),
                    },
                    EnumVariant {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Test-writer\'s favorite.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Snickerdoodle",
                        value: Constant(
                            "2",
                        ),
                    },
                ],
            },
            Protocol {
                attributes: Attrs(
                    [
                        Attr {
                            key: "BanjoLayout",
                            val: Some(
                                "ddk-interface",
                            ),
                        },
                        Attr {
                            key: "Doc",
                            val: Some(
                                " An interface for a device that\'s able to create and deliver cookies!\n",
                            ),
                        },
                    ],
                ),
                name: Ident {
                    namespace: Some(
                        "banjo.examples.interface",
                    ),
                    name: "CookieMaker",
                },
                methods: [
                    Method {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Async",
                                    val: None,
                                },
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Asynchonously preps a cookie.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Prep",
                        in_params: [
                            (
                                "cookie",
                                Identifier {
                                    id: Ident {
                                        namespace: Some(
                                            "banjo.examples.interface",
                                        ),
                                        name: "CookieKind",
                                    },
                                    reference: false,
                                },
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                        out_params: [
                            (
                                "token",
                                UInt64,
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                    },
                    Method {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Async",
                                    val: None,
                                },
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Asynchonously bakes a cookie.\n Must only be called after preping finishes.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Bake",
                        in_params: [
                            (
                                "token",
                                UInt64,
                                Attrs(
                                    [],
                                ),
                            ),
                            (
                                "time",
                                Identifier {
                                    id: Ident {
                                        namespace: Some(
                                            "zx",
                                        ),
                                        name: "time",
                                    },
                                    reference: false,
                                },
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                        out_params: [
                            (
                                "s",
                                Identifier {
                                    id: Ident {
                                        namespace: Some(
                                            "zx",
                                        ),
                                        name: "status",
                                    },
                                    reference: false,
                                },
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                    },
                    Method {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Synchronously deliver a cookie.\n Must be called only after Bake finishes.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Deliver",
                        in_params: [
                            (
                                "token",
                                UInt64,
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                        out_params: [
                            (
                                "s",
                                Identifier {
                                    id: Ident {
                                        namespace: Some(
                                            "zx",
                                        ),
                                        name: "status",
                                    },
                                    reference: false,
                                },
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                    },
                ],
            },
            Protocol {
                attributes: Attrs(
                    [
                        Attr {
                            key: "BanjoLayout",
                            val: Some(
                                "ddk-protocol",
                            ),
                        },
                        Attr {
                            key: "Doc",
                            val: Some(
                                " Protocol for a baker who outsources all of it\'s baking duties to others.\n",
                            ),
                        },
                    ],
                ),
                name: Ident {
                    namespace: Some(
                        "banjo.examples.interface",
                    ),
                    name: "Baker",
                },
                methods: [
                    Method {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " Registers a cookie maker device which the baker can use.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "Register",
                        in_params: [
                            (
                                "intf",
                                Identifier {
                                    id: Ident {
                                        namespace: Some(
                                            "banjo.examples.interface",
                                        ),
                                        name: "CookieMaker",
                                    },
                                    reference: false,
                                },
                                Attrs(
                                    [],
                                ),
                            ),
                        ],
                        out_params: [],
                    },
                    Method {
                        attributes: Attrs(
                            [
                                Attr {
                                    key: "Doc",
                                    val: Some(
                                        " De-registers a cookie maker device when it\'s no longer available.\n",
                                    ),
                                },
                            ],
                        ),
                        name: "DeRegister",
                        in_params: [],
                        out_params: [],
                    },
                ],
            },
        ],
        "zx": [
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "status",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "int32",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "time",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "int64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "duration",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "int64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "ticks",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "int64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "koid",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "vaddr",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "paddr",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "paddr32",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint32",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "gpaddr",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "off",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint64",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "procarg",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint32",
                },
            ),
            Alias(
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "signals",
                },
                Ident {
                    namespace: Some(
                        "zx",
                    ),
                    name: "uint32",
                },
            ),
        ],
    },
}
