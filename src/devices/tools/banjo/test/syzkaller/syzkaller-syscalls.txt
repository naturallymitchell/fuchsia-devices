# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# WARNING: THIS FILE IS MACHINE GENERATED. DO NOT EDIT.
# Generated from the banjo.examples.syzkaller.syscalls banjo file

resource zx_handle[int32]: ZX_HANDLE_INVALID
resource zx_process[int32]: ZX_HANDLE_INVALID
resource zx_thread[int32]: ZX_HANDLE_INVALID
resource zx_vmo[int32]: ZX_HANDLE_INVALID
resource zx_channel[int32]: ZX_HANDLE_INVALID
resource zx_event[int32]: ZX_HANDLE_INVALID
resource zx_port[int32]: ZX_HANDLE_INVALID
resource zx_interrupt[int32]: ZX_HANDLE_INVALID
resource zx_log[int32]: ZX_HANDLE_INVALID
resource zx_socket[int32]: ZX_HANDLE_INVALID
resource zx_resource[int32]: ZX_HANDLE_INVALID
resource zx_eventpair[int32]: ZX_HANDLE_INVALID
resource zx_job[int32]: ZX_HANDLE_INVALID
resource zx_vmar[int32]: ZX_HANDLE_INVALID
resource zx_fifo[int32]: ZX_HANDLE_INVALID
resource zx_guest[int32]: ZX_HANDLE_INVALID
resource zx_timer[int32]: ZX_HANDLE_INVALID
resource zx_bti[int32]: ZX_HANDLE_INVALID
resource zx_profile[int32]: ZX_HANDLE_INVALID
resource zx_debuglog[int32]: ZX_HANDLE_INVALID
resource zx_vcpu[int32]: ZX_HANDLE_INVALID
resource zx_iommu[int32]: ZX_HANDLE_INVALID
resource zx_pager[int32]: ZX_HANDLE_INVALID
resource zx_pmt[int32]: ZX_HANDLE_INVALID
resource zx_koid[int64]: 0
resource zx_time[int64]: 0, ZX_TIME_INFINITE

zx_arm64_exc_data {
	esr	int32
	far	int64
}

zx_exception_context {

}

zx_exception_header {
	size	int32
	type	int32
}

zx_info_bti {
	minimum_contiguity	int64
	aspace_size	int64
}

zx_info_cpu_stats {
	cpu_number	int32
	flags	int32
	idle_time	int64
	reschedules	int64
	context_switches	int64
	irq_preempts	int64
	preempts	int64
	yields	int64
	ints	int64
	timer_ints	int64
	timers	int64
	page_faults	int64
	exceptions	int64
	syscalls	int64
	reschedule_ipis	int64
	generic_ipis	int64
}

zx_info_handle_count {
	handle_count	int32
}

zx_info_job {
	return_code	int64
	exited	bool8
	kill_on_oom	bool8
	debugger_attached	bool8
}

zx_info_kmem_stats {
	total_bytes	int64
	free_bytes	int64
	wired_bytes	int64
	total_heap_bytes	int64
	free_heap_bytes	int64
	vmo_bytes	int64
	mmu_overhead_bytes	int64
	ipc_bytes	int64
	other_bytes	int64
}

zx_info_maps_mapping {
	mmu_flags	int32
	vmo_koid	zx_koid
	vmo_offset	int64
	committed_pages	intptr
}

zx_info_process {
	return_code	int64
	started	bool8
	exited	bool8
	debugger_attached	bool8
}

zx_info_task_stats {
	mem_mapped_bytes	intptr
	mem_private_bytes	intptr
	mem_shared_bytes	intptr
	mem_scaled_shared_bytes	intptr
}

zx_info_thread_stats {
	total_runtime	int64
}

zx_info_vmar {
	base	intptr
	len	intptr
}

zx_iommu_desc_dummy {
	reserved	int8
}

zx_packet_exception {
	pid	int64
	tid	int64
	reserved0	int64
	reserved1	int64
}

zx_packet_guest_bell {
	addr	int64
	reserved0	int64
	reserved1	int64
	reserved2	int64
}

zx_packet_guest_io {
	port	int16
	access_size	int8
	input	bool8
	reserved0	int64
	reserved1	int64
	reserved2	int64
}

zx_packet_guest_vcpu {
	type	int8
	reserved	int64
}

zx_packet_interrupt {
	timestamp	zx_time
	reserved0	int64
	reserved1	int64
	reserved2	int64
}

zx_packet_page_request {
	command	int16
	flags	int16
	reserved0	int32
	offset	int64
	length	int64
	reserved1	int64
}

zx_packet_signal {
	trigger	int32
	observed	int32
	count	int64
	reserved0	int64
	reserved1	int64
}

zx_pci_bar {
	id	int32
	type	int32
	size	intptr
}

zx_pci_init_arg {
	num_irqs	int32
	addr_window_count	int32
}

zx_pcie_device_info {
	vendor_id	int16
	device_id	int16
	base_class	int8
	sub_class	int8
	program_interface	int8
	revision_id	int8
	bus_id	int8
	dev_id	int8
	func_id	int8
}

zx_policy_timer_slack {
	min_slack	int64
	default_mode	int32
}

zx_smc_parameters {
	func_id	int32
	arg1	int64
	arg2	int64
	arg3	int64
	arg4	int64
	arg5	int64
	arg6	int64
	client_id	int16
	secure_os_id	int16
}

zx_smc_result {
	arg0	int64
	arg1	int64
	arg2	int64
	arg3	int64
	arg6	int64
}

zx_system_powerctl_arg {

}

zx_vcpu_io {
	access_size	int8
}

zx_vcpu_state {
	rax	int64
	rcx	int64
	rdx	int64
	rbx	int64
	rsp	int64
	rbp	int64
	rsi	int64
	rdi	int64
	r8	int64
	r9	int64
	r10	int64
	r11	int64
	r12	int64
	r13	int64
	r14	int64
	r15	int64
	rflags	int64
}

zx_wait_item {
	handle	zx_handle
	waitfor	int32
	pending	int32
}

zx_x86_64_exc_data {
	vector	int64
	err_code	int64
	cr2	int64
}

zx_iommu_desc_intel {
	register_base	int64
	pci_segment	int16
	whole_segment	bool8
	scope_bytes	int8
	reserved_memory_bytes	int16
	reserved	array[int8, 2]
}

zx_info_process_handle_stats {
	handle_count	array[int32, 64]
}

zx_packet_guest_mem {
	addr	int64
	inst_len	int8
	inst_buf	array[int8, 15]
	default_operand_size	int8
	reserved	array[int8, 7]
}

zx_info_vmo {
	koid	zx_koid
	name	array[int8, 32]
	size_bytes	int64
	parent_koid	zx_koid
	num_children	intptr
	num_mappings	intptr
	share_count	intptr
	flags	flags[zx_info_vmo_type_vals]
	committed_bytes	int64
	handle_rights	flags[zx_rights]
	cache_policy	flags[zx_cache_policy_options]
}

zx_policy_basic {
	condition	flags[zx_job_policy_conditions]
	policy	flags[zx_job_policy_actions]
}

zx_info_resource {
	kind	flags[zx_rsrc_kind_vals]
	flags	int32
	base	int64
	size	intptr
	name	array[int8, 32]
}

zx_info_socket {
	options	flags[zx_socket_create_options]
	rx_buf_max	intptr
	rx_buf_size	intptr
	rx_buf_available	intptr
	tx_buf_max	intptr
	tx_buf_size	intptr
}

zx_info_handle_basic {
	koid	zx_koid
	rights	flags[zx_rights]
	type	flags[zx_obj_types]
	related_koid	zx_koid
	props	flags[zx_obj_props]
}

zx_info_thread {
	state	flags[zx_thread_state_values]
}

zx_info_maps {
	name	array[int8, 32]
	base	int64
	size	intptr
	depth	intptr
	type	flags[zx_info_maps_type_vals]
}

zx_port_packet {
	key	int64
	type	flags[zx_port_packet]
	status	int32
}

zx_profile_info {
	type	flags[zx_profile_info_type]
}

zx_profile_scheduler {
	priority	int32
	boost	int32
	deboost	int32
	quantum	int32
}

zx_exception_report {
	header	zx_exception_header
	context	zx_exception_context
}

zx_object_info_handles [
	type1	zx_handle
	type2	zx_handle
	type3	zx_handle
	type4	zx_process
	type5	zx_process
	type6	zx_vmar
	type7	zx_job
	type8	zx_job
	type9	zx_thread
	type10	zx_thread
	type11	zx_process
	type12	zx_process
	type13	zx_process
	type14	zx_thread
	type15	zx_resource
	type16	zx_resource
	type17	zx_resource
	type18	zx_handle
	type19	zx_bti
	type20	zx_process
	type21	zx_socket
	type22	zx_vmo
	type23	zx_job
]

zx_object_property_handles [
	type1	zx_handle
	type2	zx_process
	type3	zx_process
	type4	zx_socket
	type5	zx_socket
	type6	zx_job
	type7	zx_handle
]

zx_packet_user [
	u64	array[int64, 4]
	u32	array[int32, 8]
	u16	array[int16, 16]
	c8	array[int8, 32]
]

zx_vcpu_read_state_types [
	type1	ptr[out, zx_vcpu_state]
]

zx_vcpu_write_state_types [
	type1	ptr[in, zx_vcpu_state]
	type2	ptr[in, zx_vcpu_io]
]

zx_iommu_types [
	type1	ptr[in, zx_iommu_desc_dummy]
	type2	ptr[in, zx_iommu_desc_intel]
]

zx_job_policy_types [
	type1	ptr[in, zx_policy_basic]
	type2	ptr[in, zx_policy_timer_slack]
]

zx_object_info_types [
	type1	ptr[out, bool8]
	type2	ptr[out, bool8]
	type3	ptr[out, zx_info_handle_basic]
	type4	ptr[out, zx_info_process]
	type5	ptr[out, array[zx_koid]]
	type6	ptr[out, zx_info_vmar]
	type7	ptr[out, array[zx_koid]]
	type8	ptr[out, array[zx_koid]]
	type9	ptr[out, zx_info_thread]
	type10	ptr[out, zx_exception_report]
	type11	ptr[out, zx_info_task_stats]
	type12	ptr[out, array[zx_info_maps]]
	type13	ptr[out, array[zx_info_vmo]]
	type14	ptr[out, zx_info_thread_stats]
	type15	ptr[out, array[zx_info_cpu_stats]]
	type16	ptr[out, zx_info_kmem_stats]
	type17	ptr[out, zx_info_resource]
	type18	ptr[out, zx_info_handle_count]
	type19	ptr[out, zx_info_bti]
	type20	ptr[out, zx_info_process_handle_stats]
	type21	ptr[out, zx_info_socket]
	type22	ptr[out, zx_info_vmo]
	type23	ptr[out, zx_info_job]
]

thread_state_kind = ZX_THREAD_STATE_GENERAL_REGS, ZX_THREAD_STATE_FP_REGS, ZX_THREAD_STATE_VECTOR_REGS, ZX_THREAD_STATE_DEBUG_REGS, ZX_THREAD_STATE_SINGLE_STEP, ZX_THREAD_X86_REGISTER_FS, ZX_THREAD_X86_REGISTER_GS

zx_bti_pin_options = ZX_BTI_PERM_READ, ZX_BTI_PERM_WRITE, ZX_BTI_PERM_EXECUTE, ZX_BTI_COMPRESS, ZX_BTI_CONTIGUOUS

zx_cache_flush_options = ZX_CACHE_FLUSH_DATA, ZX_CACHE_FLUSH_INVALIDATE, ZX_CACHE_FLUSH_INSN

zx_cache_policy_options = ZX_CACHE_POLICY_CACHED, ZX_CACHE_POLICY_UNCACHED, ZX_CACHE_POLICY_UNCACHED_DEVICE, ZX_CACHE_POLICY_WRITE_COMBINING, ZX_CACHE_POLICY_MASK

zx_clock_id = ZX_CLOCK_MONOTONIC, ZX_CLOCK_UTC, ZX_CLOCK_THREAD

zx_debuglog_create_options = ZX_LOG_FLAG_READABLE

zx_event_kind = ZX_SYSTEM_EVENT_LOW_MEMORY

zx_exception_channel_types = ZX_EXCEPTION_CHANNEL_TYPE_NONE, ZX_EXCEPTION_CHANNEL_TYPE_DEBUGGER, ZX_EXCEPTION_CHANNEL_TYPE_THREAD, ZX_EXCEPTION_CHANNEL_TYPE_PROCESS, ZX_EXCEPTION_CHANNEL_TYPE_JOB, ZX_EXCEPTION_CHANNEL_TYPE_JOB_DEBUGGER

zx_exception_port_types = ZX_EXCEPTION_PORT_TYPE_NONE, ZX_EXCEPTION_PORT_TYPE_DEBUGGER, ZX_EXCEPTION_PORT_TYPE_THREAD, ZX_EXCEPTION_PORT_TYPE_PROCESS, ZX_EXCEPTION_PORT_TYPE_JOB, ZX_EXCEPTION_PORT_TYPE_JOB_DEBUGGER

zx_feature_kind = ZX_FEATURE_KIND_CPU, ZX_FEATURE_KIND_HW_BREAKPOINT_COUNT, ZX_FEATURE_KIND_HW_WATCHPOINT_COUNT

zx_guest_trap_kind = ZX_GUEST_TRAP_BELL, ZX_GUEST_TRAP_MEM, ZX_GUEST_TRAP_IO

zx_info_maps_type_vals = ZX_INFO_MAPS_TYPE_NONE, ZX_INFO_MAPS_TYPE_ASPACE, ZX_INFO_MAPS_TYPE_VMAR, ZX_INFO_MAPS_TYPE_MAPPING

zx_info_vmo_type_vals = ZX_INFO_VMO_TYPE_PAGED, ZX_INFO_VMO_TYPE_PHYSICAL, ZX_INFO_VMO_RESIZABLE, ZX_INFO_VMO_IS_COW_CLONE, ZX_INFO_VMO_VIA_HANDLE, ZX_INFO_VMO_VIA_MAPPING, ZX_INFO_VMO_PAGER_BACKED, ZX_INFO_VMO_CONTIGUOUS

zx_interrupt_options = ZX_INTERRUPT_REMAP_IRQ, ZX_INTERRUPT_MODE_DEFAULT, ZX_INTERRUPT_MODE_EDGE_LOW, ZX_INTERRUPT_MODE_EDGE_HIGH, ZX_INTERRUPT_MODE_LEVEL_LOW, ZX_INTERRUPT_MODE_LEVEL_HIGH, ZX_INTERRUPT_MODE_EDGE_BOTH, ZX_INTERRUPT_MODE_MASK, ZX_INTERRUPT_VIRTUAL

zx_iommu_type = ZX_IOMMU_TYPE_DUMMY, ZX_IOMMU_TYPE_INTEL

zx_job_policy_actions = ZX_POL_ACTION_ALLOW, ZX_POL_ACTION_DENY, ZX_POL_ACTION_ALLOW_EXCEPTION, ZX_POL_ACTION_DENY_EXCEPTION, ZX_POL_ACTION_KILL

zx_job_policy_conditions = ZX_POL_BAD_HANDLE, ZX_POL_WRONG_OBJECT, ZX_POL_VMAR_WX, ZX_POL_NEW_ANY, ZX_POL_NEW_VMO, ZX_POL_NEW_CHANNEL, ZX_POL_NEW_EVENT, ZX_POL_NEW_EVENTPAIR, ZX_POL_NEW_PORT, ZX_POL_NEW_SOCKET, ZX_POL_NEW_FIFO, ZX_POL_NEW_TIMER, ZX_POL_NEW_PROCESS, ZX_POL_NEW_PROFILE, ZX_POL_AMBIENT_MARK_VMO_EXEC

zx_job_policy_topic = ZX_JOB_POL_BASIC, ZX_JOB_POL_TIMER_SLACK

zx_obj_props = ZX_OBJ_PROP_NONE, ZX_OBJ_PROP_WAITABLE

zx_obj_types = ZX_OBJ_TYPE_NONE, ZX_OBJ_TYPE_PROCESS, ZX_OBJ_TYPE_THREAD, ZX_OBJ_TYPE_VMO, ZX_OBJ_TYPE_CHANNEL, ZX_OBJ_TYPE_EVENT, ZX_OBJ_TYPE_PORT, ZX_OBJ_TYPE_INTERRUPT, ZX_OBJ_TYPE_PCI_DEVICE, ZX_OBJ_TYPE_LOG, ZX_OBJ_TYPE_SOCKET, ZX_OBJ_TYPE_RESOURCE, ZX_OBJ_TYPE_EVENTPAIR, ZX_OBJ_TYPE_JOB, ZX_OBJ_TYPE_VMAR, ZX_OBJ_TYPE_FIFO, ZX_OBJ_TYPE_GUEST, ZX_OBJ_TYPE_VCPU, ZX_OBJ_TYPE_TIMER, ZX_OBJ_TYPE_IOMMU, ZX_OBJ_TYPE_BTI, ZX_OBJ_TYPE_PROFILE, ZX_OBJ_TYPE_PMT, ZX_OBJ_TYPE_SUSPEND_TOKEN, ZX_OBJ_TYPE_PAGER, ZX_OBJ_TYPE_EXCEPTION

zx_object_info_topics = ZX_INFO_NONE, ZX_INFO_HANDLE_VALID, ZX_INFO_HANDLE_BASIC, ZX_INFO_PROCESS, ZX_INFO_PROCESS_THREADS, ZX_INFO_VMAR, ZX_INFO_JOB_CHILDREN, ZX_INFO_JOB_PROCESSES, ZX_INFO_THREAD, ZX_INFO_THREAD_EXCEPTION_REPORT, ZX_INFO_TASK_STATS, ZX_INFO_PROCESS_MAPS, ZX_INFO_PROCESS_VMOS, ZX_INFO_THREAD_STATS, ZX_INFO_CPU_STATS, ZX_INFO_KMEM_STATS, ZX_INFO_RESOURCE, ZX_INFO_HANDLE_COUNT, ZX_INFO_BTI, ZX_INFO_PROCESS_HANDLE_STATS, ZX_INFO_SOCKET, ZX_INFO_VMO, ZX_INFO_JOB

zx_object_property_values = ZX_PROP_NAME, ZX_PROP_PROCESS_DEBUG_ADDR, ZX_PROP_PROCESS_VDSO_BASE_ADDRESS, ZX_PROP_SOCKET_RX_THRESHOLD, ZX_PROP_SOCKET_TX_THRESHOLD, ZX_PROP_JOB_KILL_ON_OOM, ZX_PROP_EXCEPTION_STATE

zx_object_wait_async_options = ZX_WAIT_ASYNC_ONCE

zx_port_create_options = ZX_PORT_BIND_TO_INTERRUPT

zx_port_packet_type = ZX_PKT_TYPE_USER, ZX_PKT_TYPE_SIGNAL_ONE, ZX_PKT_TYPE_SIGNAL_REP, ZX_PKT_TYPE_GUEST_BELL, ZX_PKT_TYPE_GUEST_MEM, ZX_PKT_TYPE_GUEST_IO, ZX_PKT_TYPE_GUEST_VCPU, ZX_PKT_TYPE_INTERRUPT, ZX_PKT_TYPE_PAGE_REQUEST

zx_profile_info_type = ZX_PROFILE_INFO_SCHEDULER

zx_profile_scheduler_priority = ZX_PRIORITY_LOWEST, ZX_PRIORITY_LOW, ZX_PRIORITY_DEFAULT, ZX_PRIORITY_HIGH, ZX_PRIORITY_HIGHEST

zx_rights = ZX_RIGHT_NONE, ZX_RIGHT_DUPLICATE, ZX_RIGHT_TRANSFER, ZX_RIGHT_READ, ZX_RIGHT_WRITE, ZX_RIGHT_EXECUTE, ZX_RIGHT_MAP, ZX_RIGHT_GET_PROPERTY, ZX_RIGHT_SET_PROPERTY, ZX_RIGHT_ENUMERATE, ZX_RIGHT_DESTROY, ZX_RIGHT_SET_POLICY, ZX_RIGHT_GET_POLICY, ZX_RIGHT_SIGNAL, ZX_RIGHT_SIGNAL_PEER, ZX_RIGHT_WAIT, ZX_RIGHT_INSPECT, ZX_RIGHT_MANAGE_JOB, ZX_RIGHT_MANAGE_PROCESS, ZX_RIGHT_MANAGE_THREAD, ZX_RIGHT_APPLY_PROFILE, ZX_RIGHT_SAME_RIGHTS

zx_rsrc_kind_vals = ZX_RSRC_KIND_MMIO, ZX_RSRC_KIND_IRQ, ZX_RSRC_KIND_IOPORT, ZX_RSRC_KIND_HYPERVISOR, ZX_RSRC_KIND_ROOT, ZX_RSRC_KIND_VMEX, ZX_RSRC_KIND_SMC

zx_socket_create_options = ZX_SOCKET_STREAM, ZX_SOCKET_DATAGRAM, ZX_SOCKET_HAS_CONTROL, ZX_SOCKET_HAS_ACCEPT

zx_socket_read_options = ZX_SOCKET_CONTROL, ZX_SOCKET_PEEK

zx_socket_shutdown_options = ZX_SOCKET_SHUTDOWN_WRITE, ZX_SOCKET_SHUTDOWN_READ

zx_socket_write_options = ZX_SOCKET_CONTROL

zx_system_powerctl_cmd = ZX_SYSTEM_POWERCTL_ENABLE_ALL_CPUS, ZX_SYSTEM_POWERCTL_DISABLE_ALL_CPUS_BUT_PRIMARY, ZX_SYSTEM_POWERCTL_ACPI_TRANSITION_S_STATE, ZX_SYSTEM_POWERCTL_X86_SET_PKG_PL1, ZX_SYSTEM_POWERCTL_REBOOT, ZX_SYSTEM_POWERCTL_REBOOT_BOOTLOADER, ZX_SYSTEM_POWERCTL_REBOOT_RECOVERY, ZX_SYSTEM_POWERCTL_SHUTDOWN

zx_task_exception_port_options = ZX_EXCEPTION_PORT_DEBUGGER

zx_task_resume_options = ZX_RESUME_TRY_NEXT

zx_thread_state_values = ZX_THREAD_STATE_NEW, ZX_THREAD_STATE_RUNNING, ZX_THREAD_STATE_SUSPENDED, ZX_THREAD_STATE_BLOCKED, ZX_THREAD_STATE_DYING, ZX_THREAD_STATE_DEAD, ZX_THREAD_STATE_BLOCKED_EXCEPTION, ZX_THREAD_STATE_BLOCKED_SLEEPING, ZX_THREAD_STATE_BLOCKED_FUTEX, ZX_THREAD_STATE_BLOCKED_PORT, ZX_THREAD_STATE_BLOCKED_CHANNEL, ZX_THREAD_STATE_BLOCKED_WAIT_ONE, ZX_THREAD_STATE_BLOCKED_WAIT_MANY, ZX_THREAD_STATE_BLOCKED_INTERRUPT, ZX_THREAD_STATE_BLOCKED_PAGER

zx_timer_options = ZX_TIMER_SLACK_CENTER, ZX_TIMER_SLACK_EARLY, ZX_TIMER_SLACK_LATE

zx_vcpu_read_state_kind = ZX_VCPU_STATE

zx_vcpu_write_state_kind = ZX_VCPU_STATE, ZX_VCPU_IO

zx_vmar_allocate_map_options = ZX_VM_PERM_READ, ZX_VM_PERM_WRITE, ZX_VM_PERM_EXECUTE, ZX_VM_COMPACT, ZX_VM_SPECIFIC, ZX_VM_SPECIFIC_OVERWRITE, ZX_VM_CAN_MAP_SPECIFIC, ZX_VM_CAN_MAP_READ, ZX_VM_CAN_MAP_WRITE, ZX_VM_CAN_MAP_EXECUTE, ZX_VM_MAP_RANGE, ZX_VM_REQUIRE_NON_RESIZABLE, ZX_VM_ALLOW_FAULTS, ZX_VM_ALIGN_1KB, ZX_VM_ALIGN_2KB, ZX_VM_ALIGN_4KB, ZX_VM_ALIGN_8KB, ZX_VM_ALIGN_16KB, ZX_VM_ALIGN_32KB, ZX_VM_ALIGN_64KB, ZX_VM_ALIGN_128KB, ZX_VM_ALIGN_256KB, ZX_VM_ALIGN_512KB, ZX_VM_ALIGN_1MB, ZX_VM_ALIGN_2MB, ZX_VM_ALIGN_4MB, ZX_VM_ALIGN_8MB, ZX_VM_ALIGN_16MB, ZX_VM_ALIGN_32MB, ZX_VM_ALIGN_64MB, ZX_VM_ALIGN_128MB, ZX_VM_ALIGN_256MB, ZX_VM_ALIGN_512MB, ZX_VM_ALIGN_1GB, ZX_VM_ALIGN_2GB, ZX_VM_ALIGN_4GB

zx_vmar_protect_options = ZX_VM_PERM_READ, ZX_VM_PERM_WRITE, ZX_VM_PERM_EXECUTE

zx_vmo_cache_policy_options = ZX_CACHE_POLICY_CACHED, ZX_CACHE_POLICY_UNCACHED, ZX_CACHE_POLICY_UNCACHED_DEVICE, ZX_CACHE_POLICY_WRITE_COMBINING, ZX_CACHE_POLICY_MASK

zx_vmo_clone_options = ZX_VMO_CLONE_COPY_ON_WRITE, ZX_VMO_CHILD_COPY_ON_WRITE, ZX_VMO_CHILD_RESIZABLE

zx_vmo_create_options = ZX_VMO_RESIZABLE

zx_vmo_opcodes = ZX_VMO_OP_COMMIT, ZX_VMO_OP_DECOMMIT, ZX_VMO_OP_LOCK, ZX_VMO_OP_UNLOCK, ZX_VMO_OP_CACHE_SYNC, ZX_VMO_OP_CACHE_INVALIDATE, ZX_VMO_OP_CACHE_CLEAN, ZX_VMO_OP_CACHE_CLEAN_INVALIDATE

zx_job_policy_options = ZX_JOB_POL_RELATIVE, ZX_JOB_POL_ABSOLUTE

zx_clock_get(clock_id flags[zx_clock_id], out ptr[out, zx_time])
zx_clock_get_new(clock_id flags[zx_clock_id], out ptr[out, zx_time])
zx_clock_get_monotonic() zx_time
zx_nanosleep(deadline zx_time)
zx_ticks_get()
zx_ticks_per_second()
zx_deadline_after(nanoseconds int64) zx_time
zx_clock_adjust(handle zx_resource, clock_id flags[zx_clock_id], offset int64)
zx_system_get_dcache_line_size()
zx_system_get_num_cpus()
zx_system_get_version(version ptr[out, string], version_size len[version])
zx_system_get_physmem()
zx_system_get_features(kind flags[zx_feature_kind], features ptr[out, int32])
zx_system_get_event(root_job zx_job, kind flags[zx_event_kind], event ptr[out, zx_event])
zx_cache_flush(addr ptr[in, array[int8]], size bytesize[addr], options flags[zx_cache_flush_options])
zx_handle_close(handle zx_handle)
zx_handle_close_many(handles ptr[in, array[zx_handle]], num_handles len[handles])
zx_handle_duplicate(handle zx_handle, rights flags[zx_rights], out ptr[out, zx_handle])
zx_handle_replace(handle zx_handle, rights flags[zx_rights], out ptr[out, zx_handle])
zx_object_wait_one(handle zx_handle, signals int32, deadline zx_time, observed ptr[out, int32])
zx_object_wait_many(items ptr[inout, array[zx_wait_item]], count len[items], deadline zx_time)
zx_object_wait_async(handle zx_handle, port zx_port, key int64, signals int32, options flags[zx_object_wait_async_options])
zx_object_signal(handle zx_handle, clear_mask int32, set_mask int32)
zx_object_signal_peer(handle zx_handle, clear_mask int32, set_mask int32)
zx_object_get_property$ZX_PROP_NAME(handle zx_handle, property const[ZX_PROP_NAME], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_PROCESS_DEBUG_ADDR(handle zx_process, property const[ZX_PROP_PROCESS_DEBUG_ADDR], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_PROCESS_VDSO_BASE_ADDRESS(handle zx_process, property const[ZX_PROP_PROCESS_VDSO_BASE_ADDRESS], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_SOCKET_RX_THRESHOLD(handle zx_socket, property const[ZX_PROP_SOCKET_RX_THRESHOLD], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_SOCKET_TX_THRESHOLD(handle zx_socket, property const[ZX_PROP_SOCKET_TX_THRESHOLD], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_JOB_KILL_ON_OOM(handle zx_job, property const[ZX_PROP_JOB_KILL_ON_OOM], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_get_property$ZX_PROP_EXCEPTION_STATE(handle zx_handle, property const[ZX_PROP_EXCEPTION_STATE], value ptr[out, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_NAME(handle zx_handle, property const[ZX_PROP_NAME], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_PROCESS_DEBUG_ADDR(handle zx_process, property const[ZX_PROP_PROCESS_DEBUG_ADDR], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_PROCESS_VDSO_BASE_ADDRESS(handle zx_process, property const[ZX_PROP_PROCESS_VDSO_BASE_ADDRESS], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_SOCKET_RX_THRESHOLD(handle zx_socket, property const[ZX_PROP_SOCKET_RX_THRESHOLD], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_SOCKET_TX_THRESHOLD(handle zx_socket, property const[ZX_PROP_SOCKET_TX_THRESHOLD], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_JOB_KILL_ON_OOM(handle zx_job, property const[ZX_PROP_JOB_KILL_ON_OOM], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_set_property$ZX_PROP_EXCEPTION_STATE(handle zx_handle, property const[ZX_PROP_EXCEPTION_STATE], value ptr[in, array[int8]], value_size bytesize[value])
zx_object_get_info$ZX_INFO_NONE(handle zx_handle, topic const[ZX_INFO_NONE], buffer ptr[out, bool8], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_HANDLE_VALID(handle zx_handle, topic const[ZX_INFO_HANDLE_VALID], buffer ptr[out, bool8], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_HANDLE_BASIC(handle zx_handle, topic const[ZX_INFO_HANDLE_BASIC], buffer ptr[out, zx_info_handle_basic], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_PROCESS(handle zx_process, topic const[ZX_INFO_PROCESS], buffer ptr[out, zx_info_process], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_PROCESS_THREADS(handle zx_process, topic const[ZX_INFO_PROCESS_THREADS], buffer ptr[out, array[zx_koid]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_VMAR(handle zx_vmar, topic const[ZX_INFO_VMAR], buffer ptr[out, zx_info_vmar], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_JOB_CHILDREN(handle zx_job, topic const[ZX_INFO_JOB_CHILDREN], buffer ptr[out, array[zx_koid]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_JOB_PROCESSES(handle zx_job, topic const[ZX_INFO_JOB_PROCESSES], buffer ptr[out, array[zx_koid]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_THREAD(handle zx_thread, topic const[ZX_INFO_THREAD], buffer ptr[out, zx_info_thread], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_THREAD_EXCEPTION_REPORT(handle zx_thread, topic const[ZX_INFO_THREAD_EXCEPTION_REPORT], buffer ptr[out, zx_exception_report], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_TASK_STATS(handle zx_process, topic const[ZX_INFO_TASK_STATS], buffer ptr[out, zx_info_task_stats], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_PROCESS_MAPS(handle zx_process, topic const[ZX_INFO_PROCESS_MAPS], buffer ptr[out, array[zx_info_maps]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_PROCESS_VMOS(handle zx_process, topic const[ZX_INFO_PROCESS_VMOS], buffer ptr[out, array[zx_info_vmo]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_THREAD_STATS(handle zx_thread, topic const[ZX_INFO_THREAD_STATS], buffer ptr[out, zx_info_thread_stats], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_CPU_STATS(handle zx_resource, topic const[ZX_INFO_CPU_STATS], buffer ptr[out, array[zx_info_cpu_stats]], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_KMEM_STATS(handle zx_resource, topic const[ZX_INFO_KMEM_STATS], buffer ptr[out, zx_info_kmem_stats], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_RESOURCE(handle zx_resource, topic const[ZX_INFO_RESOURCE], buffer ptr[out, zx_info_resource], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_HANDLE_COUNT(handle zx_handle, topic const[ZX_INFO_HANDLE_COUNT], buffer ptr[out, zx_info_handle_count], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_BTI(handle zx_bti, topic const[ZX_INFO_BTI], buffer ptr[out, zx_info_bti], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_PROCESS_HANDLE_STATS(handle zx_process, topic const[ZX_INFO_PROCESS_HANDLE_STATS], buffer ptr[out, zx_info_process_handle_stats], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_SOCKET(handle zx_socket, topic const[ZX_INFO_SOCKET], buffer ptr[out, zx_info_socket], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_VMO(handle zx_vmo, topic const[ZX_INFO_VMO], buffer ptr[out, zx_info_vmo], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_info$ZX_INFO_JOB(handle zx_job, topic const[ZX_INFO_JOB], buffer ptr[out, zx_info_job], buffer_size bytesize[buffer], actual ptr[out, intptr], avail ptr[out, intptr])
zx_object_get_child(handle zx_handle, koid zx_koid, rights flags[zx_rights], out ptr[out, zx_handle])
zx_object_set_profile(handle zx_thread, profile zx_profile, options int32)
zx_socket_create(options flags[zx_socket_create_options], out0 ptr[out, zx_socket], out1 ptr[out, zx_socket])
zx_socket_write(handle zx_socket, options flags[zx_socket_write_options], buffer ptr[in, array[int8]], buffer_size bytesize[buffer], actual ptr[out, intptr])
zx_socket_read(handle zx_socket, options flags[zx_socket_read_options], buffer ptr[out, array[int8]], buffer_size bytesize[buffer], actual ptr[out, intptr])
zx_socket_share(handle zx_socket, socket_to_share zx_socket)
zx_socket_accept(handle zx_socket, out_socket ptr[out, zx_socket])
zx_socket_shutdown(handle zx_socket, options flags[zx_socket_shutdown_options])
zx_thread_exit()
zx_thread_create(process zx_process, name ptr[in, string], name_size len[name], options int32, out ptr[out, zx_thread])
zx_thread_start(handle zx_thread, thread_entry int64, stack int64, arg1 intptr, arg2 intptr)
zx_thread_read_state(handle zx_thread, kind flags[thread_state_kind], buffer ptr[out, array[int8]], buffer_size bytesize[buffer])
zx_thread_write_state(handle zx_thread, kind flags[thread_state_kind], buffer ptr[in, array[int8]], buffer_size bytesize[buffer])
zx_process_exit(retcode int64)
zx_process_create(job zx_job, name ptr[in, string], name_size len[name], options int32, proc_handle ptr[out, zx_process], vmar_handle ptr[out, zx_vmar])
zx_process_start(handle zx_process, thread zx_thread, entry int64, stack int64, arg1 zx_handle, arg2 intptr)
zx_process_read_memory(handle zx_process, vaddr int64, buffer ptr[out, array[int8]], buffer_size bytesize[buffer], actual ptr[out, intptr])
zx_process_write_memory(handle zx_process, vaddr int64, buffer ptr[in, array[int8]], buffer_size bytesize[buffer], actual ptr[out, intptr])
zx_job_create(parent_job zx_job, options int32, out ptr[out, zx_job])
zx_job_set_policy$ZX_JOB_POL_BASIC(handle zx_job, options flags[zx_job_policy_options], topic const[ZX_JOB_POL_BASIC], policy ptr[in, zx_policy_basic], count len[policy])
zx_job_set_policy$ZX_JOB_POL_TIMER_SLACK(handle zx_job, options flags[zx_job_policy_options], topic const[ZX_JOB_POL_TIMER_SLACK], policy ptr[in, zx_policy_timer_slack], count len[policy])
zx_task_bind_exception_port(handle zx_handle, port zx_port, key int64, options flags[zx_task_exception_port_options])
zx_task_suspend(handle zx_handle, token ptr[out, zx_handle])
zx_task_suspend_token(handle zx_handle, token ptr[out, zx_handle])
zx_task_resume_from_exception(handle zx_handle, port zx_port, options flags[zx_task_resume_options])
zx_task_create_exception_channel(handle zx_handle, options flags[zx_task_exception_port_options], out ptr[out, zx_channel])
zx_task_kill(handle zx_handle)
zx_exception_get_thread(handle zx_handle, out ptr[out, zx_thread])
zx_exception_get_process(handle zx_handle, out ptr[out, zx_process])
zx_event_create(options int32, out ptr[out, zx_event])
zx_eventpair_create(options int32, out0 ptr[out, zx_eventpair], out1 ptr[out, zx_eventpair])
zx_futex_wait(value_ptr ptr[in, int32], current_value int32, new_futex_owner zx_handle, deadline zx_time)
zx_futex_wake(value_ptr ptr[in, int32], wake_count int32)
zx_futex_requeue(value_ptr ptr[in, int32], wake_count int32, current_value int32, requeue_ptr ptr[in, int32], requeue_count int32, new_requeue_owner zx_handle)
zx_futex_wake_single_owner(value_ptr ptr[in, int32])
zx_futex_requeue_single_owner(value_ptr ptr[in, int32], current_value int32, requeue_ptr ptr[in, int32], requeue_count int32, new_requeue_owner zx_handle)
zx_futex_get_owner(value_ptr ptr[in, int32], koid ptr[out, zx_koid])
zx_port_create(options int32, out ptr[out, zx_port])
zx_port_queue(handle zx_port, packet ptr[in, zx_port_packet])
zx_port_wait(handle zx_port, deadline zx_time, packet ptr[out, zx_port_packet])
zx_port_cancel(handle zx_port, source zx_handle, key int64)
zx_timer_create(options flags[zx_timer_options], clock_id flags[zx_clock_id], out ptr[out, zx_timer])
zx_timer_set(handle zx_timer, deadline zx_time, slack int64)
zx_timer_cancel(handle zx_timer)
zx_vmo_create(size int64, options flags[zx_vmo_create_options], out ptr[out, zx_vmo])
zx_vmo_read(handle zx_vmo, buffer ptr[out, array[int8]], offset int64, buffer_size bytesize[buffer])
zx_vmo_write(handle zx_vmo, buffer ptr[in, array[int8]], offset int64, buffer_size bytesize[buffer])
zx_vmo_get_size(handle zx_vmo, size ptr[out, int64])
zx_vmo_set_size(handle zx_vmo, size int64)
zx_vmo_op_range(handle zx_vmo, op flags[zx_vmo_opcodes], offset int64, size int64, buffer ptr[inout, array[int8]], buffer_size bytesize[buffer])
zx_vmo_create_child(handle zx_vmo, options flags[zx_vmo_clone_options], offset int64, size int64, out ptr[out, zx_vmo])
zx_vmo_set_cache_policy(handle zx_vmo, cache_policy flags[zx_vmo_cache_policy_options])
zx_vmo_replace_as_executable(handle zx_vmo, vmex zx_resource, out ptr[out, zx_vmo])
zx_vmar_allocate(parent_vmar zx_vmar, options flags[zx_vmar_allocate_map_options], offset int64, size int64, child_vmar ptr[out, zx_vmar], child_addr ptr[out, int64])
zx_vmar_destroy(handle zx_vmar)
zx_vmar_map(handle zx_vmar, options flags[zx_vmar_allocate_map_options], vmar_offset int64, vmo zx_vmo, vmo_offset int64, len int64, mapped_addr ptr[out, int64])
zx_vmar_unmap(handle zx_vmo, addr int64, len int64)
zx_vmar_protect(handle zx_vmo, options flags[zx_vmar_protect_options], addr int64, len int64)
zx_cprng_draw_once(buffer ptr[out, array[int8]], buffer_size bytesize[buffer])
zx_cprng_draw(buffer ptr[out, array[int8]], buffer_size bytesize[buffer])
zx_cprng_add_entropy(buffer ptr[in, array[int8]], buffer_size bytesize[buffer])
zx_fifo_create(elem_count intptr, elem_size intptr, options int32, out0 ptr[out, zx_fifo], out1 ptr[out, zx_fifo])
zx_fifo_read(handle zx_fifo, elem_size intptr, data ptr[out, array[int8]], count bytesize[data], actual_count ptr[out, intptr])
zx_fifo_write(handle zx_fifo, elem_size intptr, data ptr[in, array[int8]], count bytesize[data], actual_count ptr[out, intptr])
zx_profile_create(root_job zx_job, options int32, profile ptr[in, zx_profile_info], out ptr[out, zx_profile])
zx_vmar_unmap_handle_close_thread_exit(vmar_handle zx_vmar, addr int64, size intptr, close_handle zx_handle)
zx_futex_wake_handle_close_thread_exit(value_ptr ptr[in, int32], wake_count int32, new_value int32, close_handle zx_handle)
zx_debuglog_create(resource zx_resource, options flags[zx_debuglog_create_options], out ptr[out, zx_debuglog])
zx_debuglog_write(handle zx_debuglog, options int32, buffer ptr[in, array[int8]], buffer_size bytesize[buffer])
zx_debuglog_read(handle zx_debuglog, options int32, buffer ptr[out, array[int8]], buffer_size bytesize[buffer])
zx_ktrace_read(handle zx_resource, data ptr[out, array[int8]], offset int32, data_size bytesize[data], actual ptr[out, intptr])
zx_ktrace_control(handle zx_resource, action int32, options int32, ptr ptr[inout, array[int8]])
zx_ktrace_write(handle zx_resource, id int32, arg0 int32, arg1 int32)
zx_mtrace_control(handle zx_resource, kind int32, action int32, options int32, ptr ptr[inout, array[int8]], ptr_size bytesize[ptr])
zx_debug_read(handle zx_resource, buffer ptr[out, string], buffer_size ptr[inout, intptr])
zx_debug_write(buffer ptr[in, string], buffer_size len[buffer])
zx_debug_send_command(resource zx_resource, buffer ptr[in, string], buffer_size len[buffer])
zx_interrupt_create(src_obj zx_resource, src_num int32, options flags[zx_interrupt_options], out_handle ptr[out, zx_interrupt])
zx_interrupt_bind(handle zx_interrupt, port_handle zx_port, key int64, options int32)
zx_interrupt_wait(handle zx_interrupt, out_timestamp ptr[out, zx_time])
zx_interrupt_destroy(handle zx_interrupt)
zx_interrupt_ack(handle zx_interrupt)
zx_interrupt_trigger(handle zx_interrupt, options int32, timestamp zx_time)
zx_interrupt_bind_vcpu(handle zx_interrupt, vcpu zx_vcpu, options int32)
zx_ioports_request(resource zx_resource, io_addr int16, len int32)
zx_vmo_create_contiguous(bti zx_bti, size intptr, alignment_log2 int32, out ptr[out, zx_vmo])
zx_vmo_create_physical(resource zx_vmo, paddr int64, size intptr, out ptr[out, zx_vmo])
zx_iommu_create$ZX_IOMMU_TYPE_DUMMY(resource zx_resource, type const[ZX_IOMMU_TYPE_DUMMY], desc ptr[in, zx_iommu_desc_dummy], desc_size bytesize[desc], out ptr[out, zx_iommu])
zx_iommu_create$ZX_IOMMU_TYPE_INTEL(resource zx_resource, type const[ZX_IOMMU_TYPE_INTEL], desc ptr[in, zx_iommu_desc_intel], desc_size bytesize[desc], out ptr[out, zx_iommu])
zx_bti_create(iommu zx_iommu, options int32, bti_id int64, out ptr[out, zx_bti])
zx_bti_pin(handle zx_bti, options flags[zx_bti_pin_options], vmo zx_vmo, offset int64, size int64, addrs ptr[out, array[int64]], addrs_count len[addrs], pmt ptr[out, zx_pmt])
zx_bti_release_quarantine(handle zx_bti)
zx_pmt_unpin(handle zx_pmt)
zx_framebuffer_get_info(resource zx_resource, format ptr[out, int32], width ptr[out, int32], height ptr[out, int32], stride ptr[out, int32])
zx_framebuffer_set_range(resource zx_resource, vmo zx_vmo, len int32, format int32, width int32, height int32, stride int32)
zx_pci_get_nth_device(handle zx_resource, index int32, out_info ptr[out, zx_pcie_device_info], out_handle ptr[out, zx_handle])
zx_pci_enable_bus_master(handle zx_handle, enable bool8)
zx_pci_reset_device(handle zx_handle)
zx_pci_config_read(handle zx_handle, offset int16, width intptr, out_val ptr[out, int32])
zx_pci_config_write(handle zx_handle, offset int16, width intptr, val int32)
zx_pci_cfg_pio_rw(handle zx_resource, bus int8, dev int8, func int8, offset int8, val ptr[inout, int32], width intptr, write bool8)
zx_pci_get_bar(handle zx_handle, bar_num int32, out_bar ptr[out, zx_pci_bar], out_handle ptr[out, zx_handle])
zx_pci_map_interrupt(handle zx_handle, which_irq int32, out_handle ptr[out, zx_handle])
zx_pci_query_irq_mode(handle zx_handle, mode int32, out_max_irqs ptr[out, int32])
zx_pci_set_irq_mode(handle zx_handle, mode int32, requested_irq_count int32)
zx_pci_init(handle zx_resource, init_buf ptr[in, array[zx_pci_init_arg]], len len[init_buf])
zx_pci_add_subtract_io_range(handle zx_resource, mmio bool8, base int64, len int64, add bool8)
zx_pc_firmware_tables(handle zx_resource, acpi_rsdp ptr[out, int64], smbios ptr[out, int64])
zx_smc_call(handle zx_handle, parameters ptr[in, zx_smc_parameters], out_smc_result ptr[out, zx_smc_result])
zx_resource_create(parent_rsrc zx_resource, options int32, base int64, size intptr, name ptr[in, string], name_size len[name], resource_out ptr[out, zx_resource])
zx_guest_create(resource zx_resource, options int32, guest_handle ptr[out, zx_guest], vmar_handle ptr[out, zx_vmar])
zx_guest_set_trap(handle zx_guest, kind flags[zx_guest_trap_kind], addr int64, size intptr, port_handle zx_port, key int64)
zx_vcpu_create(guest zx_guest, options int32, entry int64, out ptr[out, zx_vcpu])
zx_vcpu_resume(handle zx_vcpu, packet ptr[out, zx_port_packet])
zx_vcpu_interrupt(handle zx_vcpu, vector int32)
zx_vcpu_read_state$ZX_VCPU_STATE(handle zx_handle, kind const[ZX_VCPU_STATE], buffer ptr[out, zx_vcpu_state], buffer_size bytesize[buffer])
zx_vcpu_write_state$ZX_VCPU_STATE(handle zx_handle, kind const[ZX_VCPU_STATE], buffer ptr[in, zx_vcpu_state], buffer_size bytesize[buffer])
zx_vcpu_write_state$ZX_VCPU_IO(handle zx_handle, kind const[ZX_VCPU_IO], buffer ptr[in, zx_vcpu_io], buffer_size bytesize[buffer])
zx_system_mexec(resource zx_resource, kernel_vmo zx_vmo, bootimage_vmo zx_vmo)
zx_system_mexec_payload_get(resource zx_resource, buffer ptr[out, array[int8]], buffer_size bytesize[buffer])
zx_system_powerctl(resource zx_resource, cmd flags[zx_system_powerctl_cmd], arg ptr[in, zx_system_powerctl_arg])
zx_pager_create(options int32, out ptr[out, zx_pager])
zx_pager_create_vmo(pager zx_pager, options int32, port zx_port, key int64, size int64, out ptr[out, zx_vmo])
zx_pager_detach_vmo(pager zx_pager, vmo zx_vmo)
zx_pager_supply_pages(pager zx_pager, pager_vmo zx_vmo, offset int64, length int64, aux_vmo zx_vmo, aux_offset int64)