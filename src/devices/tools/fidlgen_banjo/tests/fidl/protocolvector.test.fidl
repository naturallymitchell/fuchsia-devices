// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library banjo.examples.protocolvector;

// TODO(surajmalhotra): Reference for vectors.

using zx;

@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol Vector {
    Bool(struct {
        b vector<bool>:1;
    }) -> (struct {
        b vector<bool>:1;
    });
    Int8(struct {
        i8 vector<int8>:1;
    }) -> (struct {
        i8 vector<int8>:1;
    });
    Int16(struct {
        i16 vector<int16>:1;
    }) -> (struct {
        i16 vector<int16>:1;
    });
    Int32(struct {
        i32 vector<int32>:1;
    }) -> (struct {
        i32 vector<int32>:1;
    });
    Int64(struct {
        i64 vector<int64>:1;
    }) -> (struct {
        i64 vector<int64>:1;
    });
    Uint8(struct {
        u8 vector<uint8>:1;
    }) -> (struct {
        u8 vector<uint8>:1;
    });
    Uint16(struct {
        u16 vector<uint16>:1;
    }) -> (struct {
        u16 vector<uint16>:1;
    });
    Uint32(struct {
        u32 vector<uint32>:1;
    }) -> (struct {
        u32 vector<uint32>:1;
    });
    Uint64(struct {
        u64 vector<uint64>:1;
    }) -> (struct {
        u64 vector<uint64>:1;
    });
    Float32(struct {
        f32 vector<float32>:1;
    }) -> (struct {
        f32 vector<float32>:1;
    });
    Float64(struct {
        u64 vector<float64>:1;
    }) -> (struct {
        f64 vector<float64>:1;
    });
    Handle(resource struct {
        u64 vector<zx.handle>:1;
    }) -> (resource struct {
        f64 vector<zx.handle>:1;
    });
};

const vector_size uint32 = 32;

@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol Vector2 {
    Bool(struct {
        b vector<bool>:vector_size;
    }) -> (struct {
        b vector<bool>:vector_size;
    });
    Int8(struct {
        i8 vector<int8>:vector_size;
    }) -> (struct {
        i8 vector<int8>:vector_size;
    });
    Int16(struct {
        i16 vector<int16>:vector_size;
    }) -> (struct {
        i16 vector<int16>:vector_size;
    });
    Int32(struct {
        i32 vector<int32>:vector_size;
    }) -> (struct {
        i32 vector<int32>:vector_size;
    });
    Int64(struct {
        i64 vector<int64>:vector_size;
    }) -> (struct {
        i64 vector<int64>:vector_size;
    });
    Uint8(struct {
        u8 vector<uint8>:vector_size;
    }) -> (struct {
        u8 vector<uint8>:vector_size;
    });
    Uint16(struct {
        u16 vector<uint16>:vector_size;
    }) -> (struct {
        u16 vector<uint16>:vector_size;
    });
    Uint32(struct {
        u32 vector<uint32>:vector_size;
    }) -> (struct {
        u32 vector<uint32>:vector_size;
    });
    Uint64(struct {
        u64 vector<uint64>:vector_size;
    }) -> (struct {
        u64 vector<uint64>:vector_size;
    });
    Float32(struct {
        f32 vector<float32>:vector_size;
    }) -> (struct {
        f32 vector<float32>:vector_size;
    });
    Float64(struct {
        u64 vector<float64>:vector_size;
    }) -> (struct {
        f64 vector<float64>:vector_size;
    });
    Handle(resource struct {
        u64 vector<zx.handle>:vector_size;
    }) -> (resource struct {
        f64 vector<zx.handle>:vector_size;
    });
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol VectorOfVectors {
    Bool(struct {
        b vector<vector<bool>:4>:vector_size;
    }) -> (struct {
        b vector<vector<bool>:4>:vector_size;
    });
    Int8(struct {
        i8 vector<vector<int8>:4>:vector_size;
    }) -> (struct {
        i8 vector<vector<int8>:4>:vector_size;
    });
    Int16(struct {
        i16 vector<vector<int16>:4>:vector_size;
    }) -> (struct {
        i16 vector<vector<int16>:4>:vector_size;
    });
    Int32(struct {
        i32 vector<vector<int32>:4>:vector_size;
    }) -> (struct {
        i32 vector<vector<int32>:4>:vector_size;
    });
    Int64(struct {
        i64 vector<vector<int64>:4>:vector_size;
    }) -> (struct {
        i64 vector<vector<int64>:4>:vector_size;
    });
    Uint8(struct {
        u8 vector<vector<uint8>:4>:vector_size;
    }) -> (struct {
        u8 vector<vector<uint8>:4>:vector_size;
    });
    Uint16(struct {
        u16 vector<vector<uint16>:4>:vector_size;
    }) -> (struct {
        u16 vector<vector<uint16>:4>:vector_size;
    });
    Uint32(struct {
        u32 vector<vector<uint32>:4>:vector_size;
    }) -> (struct {
        u32 vector<vector<uint32>:4>:vector_size;
    });
    Uint64(struct {
        u64 vector<vector<uint64>:4>:vector_size;
    }) -> (struct {
        u64 vector<vector<uint64>:4>:vector_size;
    });
    Float32(struct {
        f32 vector<vector<float32>:4>:vector_size;
    }) -> (struct {
        f32 vector<vector<float32>:4>:vector_size;
    });
    Float64(struct {
        u64 vector<vector<float64>:4>:vector_size;
    }) -> (struct {
        f64 vector<vector<float64>:4>:vector_size;
    });
    Handle(resource struct {
        u64 vector<vector<zx.handle>:4>:vector_size;
    }) -> (resource struct {
        f64 vector<vector<zx.handle>:4>:vector_size;
    });
};
