# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/board.gni")
import("//build/config/fuchsia/rules.gni")

config("factory") {
  defines = [ "FACTORY_BUILD" ]
}

template("sherlock_driver") {
  driver_module(target_name) {
    forward_variables_from(invoker, "*")

    configs += [
      "//build/config:all_source",
      "//build/config/fuchsia:enable_zircon_asserts",
    ]
    configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
    configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
    if (is_fuchsia) {
      configs += [ "//build/unification/config:zircon-migrated" ]
    }
    if (use_factory) {
      configs += [ ":factory" ]
    }

    # Sherlock board is used for both sherlock and luis. This define helps
    # tweak necessary parameters.
    if (board_name == "luis") {
      defines = [ "IS_LUIS=1" ]
    }

    sources = [
      "luis-thermal.cc",
      "sherlock-audio.cc",
      "sherlock-backlight.cc",
      "sherlock-bluetooth.cc",
      "sherlock-board.cc",
      "sherlock-buttons.cc",
      "sherlock-camera.cc",
      "sherlock-canvas.cc",
      "sherlock-clk.cc",
      "sherlock-cpu.cc",
      "sherlock-display.cc",
      "sherlock-emmc.cc",
      "sherlock-gpio.cc",
      "sherlock-hevc-enc.cc",
      "sherlock-i2c.cc",
      "sherlock-light.cc",
      "sherlock-mali.cc",
      "sherlock-nna.cc",
      "sherlock-ot-radio.cc",
      "sherlock-pwm.cc",
      "sherlock-ram.cc",
      "sherlock-sdio.cc",
      "sherlock-securemem.cc",
      "sherlock-spi.cc",
      "sherlock-sysmem.cc",
      "sherlock-tee.cc",
      "sherlock-thermal.cc",
      "sherlock-thermistor.cc",
      "sherlock-touch.cc",
      "sherlock-usb.cc",
      "sherlock-video-enc.cc",
      "sherlock-video.cc",
      "sherlock.cc",
    ]

    deps = [
      "//sdk/banjo/ddk.protocol.clock",
      "//sdk/banjo/ddk.protocol.clockimpl",
      "//sdk/banjo/ddk.protocol.gpio",
      "//sdk/banjo/ddk.protocol.gpioimpl",
      "//sdk/banjo/ddk.protocol.iommu",
      "//sdk/banjo/ddk.protocol.platform.bus",
      "//sdk/banjo/ddk.protocol.platform.device",
      "//sdk/banjo/ddk.protocol.scpi",
      "//sdk/banjo/ddk.protocol.sdmmc",
      "//sdk/banjo/ddk.protocol.serial",
      "//sdk/fidl/fuchsia.hardware.serial:fuchsia.hardware.serial_c",
      "//sdk/fidl/fuchsia.hardware.thermal:fuchsia.hardware.thermal_c",
      "//sdk/fidl/fuchsia.sysmem:fuchsia.sysmem_c",
      "//src/connectivity/openthread/lib/ot-radio",
      "//src/devices/lib/amlogic",
      "//src/devices/lib/broadcom",
      "//src/devices/lib/driver",
      "//src/devices/lib/focaltech",
      "//src/devices/lib/mmio",
      "//src/devices/lib/thermal",
      "//src/devices/usb/lib/usb",
      "//src/graphics/display/lib/device-protocol-display",
      "//src/lib/ddk",
      "//src/lib/ddktl",
      "//zircon/public/lib/fbl",
      "//zircon/public/lib/hwreg",
      "//zircon/public/lib/zircon-internal",
      "//zircon/public/lib/zx",
    ]
  }
}

sherlock_driver("sherlock") {
  use_factory = false
}

sherlock_driver("sherlock-factory") {
  use_factory = true
}
